<?php
/**
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * @package    apostrophePlugin
 * @subpackage    model
 * @author     P'unk Avenue <apostrophe@punkave.com>
 */
abstract class PluginaRawHTMLSlot extends BaseaRawHTMLSlot
{
  protected $editDefault = true;

  /**
   * DOCUMENT ME
   * @return mixed
   */
  public function getSearchText()
  {
    // Convert from HTML to plaintext before indexing by Lucene
    
    // However first add line breaks after certain tags for better formatting
    // (this method is also used for generating informational diffs between versions).
    // This is a noncritical feature so it doesn't have to be as precise
    // as strip_tags and shouldn't try to substitute for it in the matter of 
    // actually removing the tags
    $value = preg_replace("/(<p>|<br.*?>|<blockquote>|<li>|<dt>|<dd>|<nl>|<ol>)/i", "$1\n", $this->value);
    
    return aHtml::toPlaintext($value);
  }

  /**
   * 
   * Returns the plaintext representation of this slot
   * @return mixed
   */
  public function getText()
  {
    return $this->getSearchText();
  }

  /**
   * 
   * This function returns a basic HTML representation of your slot's comments
   * (passing the default settings of aHtml::simplify, for instance). Used for
   * Google Calendar buttons, RSS feeds and similar. For raw HTML slots
   * we can return the noscript tag for any script tag, return nothing for
   * any script tag, or ignore the raw HTML slot entirely. The default is
   * to return the noscript tag, because it is closest to the old behavior of
   * rendering all of the text (which had the bug that it would render
   * source code as text, because script source code appears between tags)
   * @return string
   */
  public function getBasicHtml()
  {
    switch (sfConfig::get('app_a_raw_html_summary', 'noscriptInScriptTags')) {
      case 'noscriptInScriptTags':
      $this->value = preg_replace_callback('/\<script.*?>.*?\<\/script\>/s', array($this, 'getNoscript'), $this->value);
      break;
      case 'ignoreScriptTags':
      $this->value = preg_replace('/\<script.*?>.*?\<\/script\>/s', '', $this->value);
      break;
      case 'ignore':
      return '';
    }
    return aHtml::simplify($this->value);
  }

  public function getNoscript($a)
  {
    $s = $a[0];
    if (preg_match('/\<noscript.*?>(.*?)\<\/noscript\>/s', $s, $matches))
    {
      return $matches[1];
    }
    else
    {
      return '';
    }
  }
}
